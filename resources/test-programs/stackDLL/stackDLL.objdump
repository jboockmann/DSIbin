
stackDLL/stackDLL:     file format elf64-x86-64


Disassembly of section .init:

00000000004003e0 <_init>:
  4003e0:	48 83 ec 08          	sub    $0x8,%rsp
  4003e4:	48 8b 05 0d 0c 20 00 	mov    0x200c0d(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  4003eb:	48 85 c0             	test   %rax,%rax
  4003ee:	74 05                	je     4003f5 <_init+0x15>
  4003f0:	e8 3b 00 00 00       	callq  400430 <__gmon_start__@plt>
  4003f5:	48 83 c4 08          	add    $0x8,%rsp
  4003f9:	c3                   	retq   

Disassembly of section .plt:

0000000000400400 <printf@plt-0x10>:
  400400:	ff 35 02 0c 20 00    	pushq  0x200c02(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400406:	ff 25 04 0c 20 00    	jmpq   *0x200c04(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40040c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400410 <printf@plt>:
  400410:	ff 25 02 0c 20 00    	jmpq   *0x200c02(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400416:	68 00 00 00 00       	pushq  $0x0
  40041b:	e9 e0 ff ff ff       	jmpq   400400 <_init+0x20>

0000000000400420 <__libc_start_main@plt>:
  400420:	ff 25 fa 0b 20 00    	jmpq   *0x200bfa(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400426:	68 01 00 00 00       	pushq  $0x1
  40042b:	e9 d0 ff ff ff       	jmpq   400400 <_init+0x20>

0000000000400430 <__gmon_start__@plt>:
  400430:	ff 25 f2 0b 20 00    	jmpq   *0x200bf2(%rip)        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400436:	68 02 00 00 00       	pushq  $0x2
  40043b:	e9 c0 ff ff ff       	jmpq   400400 <_init+0x20>

Disassembly of section .text:

0000000000400440 <_start>:
  400440:	31 ed                	xor    %ebp,%ebp
  400442:	49 89 d1             	mov    %rdx,%r9
  400445:	5e                   	pop    %rsi
  400446:	48 89 e2             	mov    %rsp,%rdx
  400449:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40044d:	50                   	push   %rax
  40044e:	54                   	push   %rsp
  40044f:	49 c7 c0 b0 06 40 00 	mov    $0x4006b0,%r8
  400456:	48 c7 c1 40 06 40 00 	mov    $0x400640,%rcx
  40045d:	48 c7 c7 1a 06 40 00 	mov    $0x40061a,%rdi
  400464:	e8 b7 ff ff ff       	callq  400420 <__libc_start_main@plt>
  400469:	f4                   	hlt    
  40046a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400470 <deregister_tm_clones>:
  400470:	b8 47 10 60 00       	mov    $0x601047,%eax
  400475:	55                   	push   %rbp
  400476:	48 2d 40 10 60 00    	sub    $0x601040,%rax
  40047c:	48 83 f8 0e          	cmp    $0xe,%rax
  400480:	48 89 e5             	mov    %rsp,%rbp
  400483:	77 02                	ja     400487 <deregister_tm_clones+0x17>
  400485:	5d                   	pop    %rbp
  400486:	c3                   	retq   
  400487:	b8 00 00 00 00       	mov    $0x0,%eax
  40048c:	48 85 c0             	test   %rax,%rax
  40048f:	74 f4                	je     400485 <deregister_tm_clones+0x15>
  400491:	5d                   	pop    %rbp
  400492:	bf 40 10 60 00       	mov    $0x601040,%edi
  400497:	ff e0                	jmpq   *%rax
  400499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004004a0 <register_tm_clones>:
  4004a0:	b8 40 10 60 00       	mov    $0x601040,%eax
  4004a5:	55                   	push   %rbp
  4004a6:	48 2d 40 10 60 00    	sub    $0x601040,%rax
  4004ac:	48 c1 f8 03          	sar    $0x3,%rax
  4004b0:	48 89 e5             	mov    %rsp,%rbp
  4004b3:	48 89 c2             	mov    %rax,%rdx
  4004b6:	48 c1 ea 3f          	shr    $0x3f,%rdx
  4004ba:	48 01 d0             	add    %rdx,%rax
  4004bd:	48 d1 f8             	sar    %rax
  4004c0:	75 02                	jne    4004c4 <register_tm_clones+0x24>
  4004c2:	5d                   	pop    %rbp
  4004c3:	c3                   	retq   
  4004c4:	ba 00 00 00 00       	mov    $0x0,%edx
  4004c9:	48 85 d2             	test   %rdx,%rdx
  4004cc:	74 f4                	je     4004c2 <register_tm_clones+0x22>
  4004ce:	5d                   	pop    %rbp
  4004cf:	48 89 c6             	mov    %rax,%rsi
  4004d2:	bf 40 10 60 00       	mov    $0x601040,%edi
  4004d7:	ff e2                	jmpq   *%rdx
  4004d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004004e0 <__do_global_dtors_aux>:
  4004e0:	80 3d 59 0b 20 00 00 	cmpb   $0x0,0x200b59(%rip)        # 601040 <__TMC_END__>
  4004e7:	75 11                	jne    4004fa <__do_global_dtors_aux+0x1a>
  4004e9:	55                   	push   %rbp
  4004ea:	48 89 e5             	mov    %rsp,%rbp
  4004ed:	e8 7e ff ff ff       	callq  400470 <deregister_tm_clones>
  4004f2:	5d                   	pop    %rbp
  4004f3:	c6 05 46 0b 20 00 01 	movb   $0x1,0x200b46(%rip)        # 601040 <__TMC_END__>
  4004fa:	f3 c3                	repz retq 
  4004fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400500 <frame_dummy>:
  400500:	48 83 3d 18 09 20 00 	cmpq   $0x0,0x200918(%rip)        # 600e20 <__JCR_END__>
  400507:	00 
  400508:	74 1e                	je     400528 <frame_dummy+0x28>
  40050a:	b8 00 00 00 00       	mov    $0x0,%eax
  40050f:	48 85 c0             	test   %rax,%rax
  400512:	74 14                	je     400528 <frame_dummy+0x28>
  400514:	55                   	push   %rbp
  400515:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  40051a:	48 89 e5             	mov    %rsp,%rbp
  40051d:	ff d0                	callq  *%rax
  40051f:	5d                   	pop    %rbp
  400520:	e9 7b ff ff ff       	jmpq   4004a0 <register_tm_clones>
  400525:	0f 1f 00             	nopl   (%rax)
  400528:	e9 73 ff ff ff       	jmpq   4004a0 <register_tm_clones>

000000000040052d <addNodeToList>:
};


// add a new stack node to the list if id != 0
// traverse the list in normal and reverse direction if id != 0
void addNodeToList(int id, struct node* prevNode) {
  40052d:	55                   	push   %rbp
  40052e:	48 89 e5             	mov    %rsp,%rbp
  400531:	48 83 ec 30          	sub    $0x30,%rsp
  400535:	89 7d dc             	mov    %edi,-0x24(%rbp)
  400538:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if(id == 0) {
  40053c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  400540:	0f 85 95 00 00 00    	jne    4005db <addNodeToList+0xae>
		// stop adding new nodes. print the list and exit
		printf("Printing list in reverse: ");
  400546:	bf c4 06 40 00       	mov    $0x4006c4,%edi
  40054b:	b8 00 00 00 00       	mov    $0x0,%eax
  400550:	e8 bb fe ff ff       	callq  400410 <printf@plt>
		while(prevNode->prev != NULL){
  400555:	eb 23                	jmp    40057a <addNodeToList+0x4d>
			printf("%d, ",prevNode->id);
  400557:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40055b:	8b 00                	mov    (%rax),%eax
  40055d:	89 c6                	mov    %eax,%esi
  40055f:	bf df 06 40 00       	mov    $0x4006df,%edi
  400564:	b8 00 00 00 00       	mov    $0x0,%eax
  400569:	e8 a2 fe ff ff       	callq  400410 <printf@plt>
			prevNode = prevNode->prev;
  40056e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400572:	48 8b 40 10          	mov    0x10(%rax),%rax
  400576:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
// traverse the list in normal and reverse direction if id != 0
void addNodeToList(int id, struct node* prevNode) {
	if(id == 0) {
		// stop adding new nodes. print the list and exit
		printf("Printing list in reverse: ");
		while(prevNode->prev != NULL){
  40057a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40057e:	48 8b 40 10          	mov    0x10(%rax),%rax
  400582:	48 85 c0             	test   %rax,%rax
  400585:	75 d0                	jne    400557 <addNodeToList+0x2a>
			printf("%d, ",prevNode->id);
			prevNode = prevNode->prev;
		}
		
		printf("\nFirst item in list: %d\n", prevNode->id);
  400587:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40058b:	8b 00                	mov    (%rax),%eax
  40058d:	89 c6                	mov    %eax,%esi
  40058f:	bf e4 06 40 00       	mov    $0x4006e4,%edi
  400594:	b8 00 00 00 00       	mov    $0x0,%eax
  400599:	e8 72 fe ff ff       	callq  400410 <printf@plt>

		printf("Printing list in normal: ");
  40059e:	bf fd 06 40 00       	mov    $0x4006fd,%edi
  4005a3:	b8 00 00 00 00       	mov    $0x0,%eax
  4005a8:	e8 63 fe ff ff       	callq  400410 <printf@plt>
		while(prevNode != NULL){
  4005ad:	eb 23                	jmp    4005d2 <addNodeToList+0xa5>
			printf("%d, ",prevNode->id);
  4005af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005b3:	8b 00                	mov    (%rax),%eax
  4005b5:	89 c6                	mov    %eax,%esi
  4005b7:	bf df 06 40 00       	mov    $0x4006df,%edi
  4005bc:	b8 00 00 00 00       	mov    $0x0,%eax
  4005c1:	e8 4a fe ff ff       	callq  400410 <printf@plt>
			prevNode = prevNode->next;
  4005c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005ca:	48 8b 40 08          	mov    0x8(%rax),%rax
  4005ce:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		}
		
		printf("\nFirst item in list: %d\n", prevNode->id);

		printf("Printing list in normal: ");
		while(prevNode != NULL){
  4005d2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  4005d7:	75 d6                	jne    4005af <addNodeToList+0x82>
  4005d9:	eb 3d                	jmp    400618 <addNodeToList+0xeb>


	} else {
		// add a new node to the list
		struct node newNode;
		newNode.id = id;
  4005db:	8b 45 dc             	mov    -0x24(%rbp),%eax
  4005de:	89 45 e0             	mov    %eax,-0x20(%rbp)
		newNode.next = NULL;
  4005e1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4005e8:	00 
		newNode.prev = prevNode;
  4005e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if(prevNode != NULL) {
  4005f1:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  4005f6:	74 0c                	je     400604 <addNodeToList+0xd7>
			prevNode->next = &newNode;	
  4005f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005fc:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  400600:	48 89 50 08          	mov    %rdx,0x8(%rax)
		}
		addNodeToList(id-1, &newNode);
  400604:	8b 45 dc             	mov    -0x24(%rbp),%eax
  400607:	8d 50 ff             	lea    -0x1(%rax),%edx
  40060a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40060e:	48 89 c6             	mov    %rax,%rsi
  400611:	89 d7                	mov    %edx,%edi
  400613:	e8 15 ff ff ff       	callq  40052d <addNodeToList>
	}
}
  400618:	c9                   	leaveq 
  400619:	c3                   	retq   

000000000040061a <main>:


int main(void) {
  40061a:	55                   	push   %rbp
  40061b:	48 89 e5             	mov    %rsp,%rbp
	addNodeToList(10, NULL);
  40061e:	be 00 00 00 00       	mov    $0x0,%esi
  400623:	bf 0a 00 00 00       	mov    $0xa,%edi
  400628:	e8 00 ff ff ff       	callq  40052d <addNodeToList>
	return 0;
  40062d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400632:	5d                   	pop    %rbp
  400633:	c3                   	retq   
  400634:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40063b:	00 00 00 
  40063e:	66 90                	xchg   %ax,%ax

0000000000400640 <__libc_csu_init>:
  400640:	41 57                	push   %r15
  400642:	41 89 ff             	mov    %edi,%r15d
  400645:	41 56                	push   %r14
  400647:	49 89 f6             	mov    %rsi,%r14
  40064a:	41 55                	push   %r13
  40064c:	49 89 d5             	mov    %rdx,%r13
  40064f:	41 54                	push   %r12
  400651:	4c 8d 25 b8 07 20 00 	lea    0x2007b8(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  400658:	55                   	push   %rbp
  400659:	48 8d 2d b8 07 20 00 	lea    0x2007b8(%rip),%rbp        # 600e18 <__init_array_end>
  400660:	53                   	push   %rbx
  400661:	4c 29 e5             	sub    %r12,%rbp
  400664:	31 db                	xor    %ebx,%ebx
  400666:	48 c1 fd 03          	sar    $0x3,%rbp
  40066a:	48 83 ec 08          	sub    $0x8,%rsp
  40066e:	e8 6d fd ff ff       	callq  4003e0 <_init>
  400673:	48 85 ed             	test   %rbp,%rbp
  400676:	74 1e                	je     400696 <__libc_csu_init+0x56>
  400678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40067f:	00 
  400680:	4c 89 ea             	mov    %r13,%rdx
  400683:	4c 89 f6             	mov    %r14,%rsi
  400686:	44 89 ff             	mov    %r15d,%edi
  400689:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40068d:	48 83 c3 01          	add    $0x1,%rbx
  400691:	48 39 eb             	cmp    %rbp,%rbx
  400694:	75 ea                	jne    400680 <__libc_csu_init+0x40>
  400696:	48 83 c4 08          	add    $0x8,%rsp
  40069a:	5b                   	pop    %rbx
  40069b:	5d                   	pop    %rbp
  40069c:	41 5c                	pop    %r12
  40069e:	41 5d                	pop    %r13
  4006a0:	41 5e                	pop    %r14
  4006a2:	41 5f                	pop    %r15
  4006a4:	c3                   	retq   
  4006a5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  4006ac:	00 00 00 00 

00000000004006b0 <__libc_csu_fini>:
  4006b0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004006b4 <_fini>:
  4006b4:	48 83 ec 08          	sub    $0x8,%rsp
  4006b8:	48 83 c4 08          	add    $0x8,%rsp
  4006bc:	c3                   	retq   
