
mbg-dll-with-dll-children/mbg-dll-with-dll-children:     file format elf64-x86-64


Disassembly of section .init:

00000000004003e0 <_init>:
  4003e0:	48 83 ec 08          	sub    $0x8,%rsp
  4003e4:	48 8b 05 0d 0c 20 00 	mov    0x200c0d(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  4003eb:	48 85 c0             	test   %rax,%rax
  4003ee:	74 05                	je     4003f5 <_init+0x15>
  4003f0:	e8 2b 00 00 00       	callq  400420 <__gmon_start__@plt>
  4003f5:	48 83 c4 08          	add    $0x8,%rsp
  4003f9:	c3                   	retq   

Disassembly of section .plt:

0000000000400400 <__libc_start_main@plt-0x10>:
  400400:	ff 35 02 0c 20 00    	pushq  0x200c02(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400406:	ff 25 04 0c 20 00    	jmpq   *0x200c04(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40040c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400410 <__libc_start_main@plt>:
  400410:	ff 25 02 0c 20 00    	jmpq   *0x200c02(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400416:	68 00 00 00 00       	pushq  $0x0
  40041b:	e9 e0 ff ff ff       	jmpq   400400 <_init+0x20>

0000000000400420 <__gmon_start__@plt>:
  400420:	ff 25 fa 0b 20 00    	jmpq   *0x200bfa(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400426:	68 01 00 00 00       	pushq  $0x1
  40042b:	e9 d0 ff ff ff       	jmpq   400400 <_init+0x20>

0000000000400430 <malloc@plt>:
  400430:	ff 25 f2 0b 20 00    	jmpq   *0x200bf2(%rip)        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400436:	68 02 00 00 00       	pushq  $0x2
  40043b:	e9 c0 ff ff ff       	jmpq   400400 <_init+0x20>

Disassembly of section .text:

0000000000400440 <_start>:
  400440:	31 ed                	xor    %ebp,%ebp
  400442:	49 89 d1             	mov    %rdx,%r9
  400445:	5e                   	pop    %rsi
  400446:	48 89 e2             	mov    %rsp,%rdx
  400449:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40044d:	50                   	push   %rax
  40044e:	54                   	push   %rsp
  40044f:	49 c7 c0 c0 06 40 00 	mov    $0x4006c0,%r8
  400456:	48 c7 c1 50 06 40 00 	mov    $0x400650,%rcx
  40045d:	48 c7 c7 2d 05 40 00 	mov    $0x40052d,%rdi
  400464:	e8 a7 ff ff ff       	callq  400410 <__libc_start_main@plt>
  400469:	f4                   	hlt    
  40046a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400470 <deregister_tm_clones>:
  400470:	b8 47 10 60 00       	mov    $0x601047,%eax
  400475:	55                   	push   %rbp
  400476:	48 2d 40 10 60 00    	sub    $0x601040,%rax
  40047c:	48 83 f8 0e          	cmp    $0xe,%rax
  400480:	48 89 e5             	mov    %rsp,%rbp
  400483:	77 02                	ja     400487 <deregister_tm_clones+0x17>
  400485:	5d                   	pop    %rbp
  400486:	c3                   	retq   
  400487:	b8 00 00 00 00       	mov    $0x0,%eax
  40048c:	48 85 c0             	test   %rax,%rax
  40048f:	74 f4                	je     400485 <deregister_tm_clones+0x15>
  400491:	5d                   	pop    %rbp
  400492:	bf 40 10 60 00       	mov    $0x601040,%edi
  400497:	ff e0                	jmpq   *%rax
  400499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004004a0 <register_tm_clones>:
  4004a0:	b8 40 10 60 00       	mov    $0x601040,%eax
  4004a5:	55                   	push   %rbp
  4004a6:	48 2d 40 10 60 00    	sub    $0x601040,%rax
  4004ac:	48 c1 f8 03          	sar    $0x3,%rax
  4004b0:	48 89 e5             	mov    %rsp,%rbp
  4004b3:	48 89 c2             	mov    %rax,%rdx
  4004b6:	48 c1 ea 3f          	shr    $0x3f,%rdx
  4004ba:	48 01 d0             	add    %rdx,%rax
  4004bd:	48 d1 f8             	sar    %rax
  4004c0:	75 02                	jne    4004c4 <register_tm_clones+0x24>
  4004c2:	5d                   	pop    %rbp
  4004c3:	c3                   	retq   
  4004c4:	ba 00 00 00 00       	mov    $0x0,%edx
  4004c9:	48 85 d2             	test   %rdx,%rdx
  4004cc:	74 f4                	je     4004c2 <register_tm_clones+0x22>
  4004ce:	5d                   	pop    %rbp
  4004cf:	48 89 c6             	mov    %rax,%rsi
  4004d2:	bf 40 10 60 00       	mov    $0x601040,%edi
  4004d7:	ff e2                	jmpq   *%rdx
  4004d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004004e0 <__do_global_dtors_aux>:
  4004e0:	80 3d 59 0b 20 00 00 	cmpb   $0x0,0x200b59(%rip)        # 601040 <__TMC_END__>
  4004e7:	75 11                	jne    4004fa <__do_global_dtors_aux+0x1a>
  4004e9:	55                   	push   %rbp
  4004ea:	48 89 e5             	mov    %rsp,%rbp
  4004ed:	e8 7e ff ff ff       	callq  400470 <deregister_tm_clones>
  4004f2:	5d                   	pop    %rbp
  4004f3:	c6 05 46 0b 20 00 01 	movb   $0x1,0x200b46(%rip)        # 601040 <__TMC_END__>
  4004fa:	f3 c3                	repz retq 
  4004fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400500 <frame_dummy>:
  400500:	48 83 3d 18 09 20 00 	cmpq   $0x0,0x200918(%rip)        # 600e20 <__JCR_END__>
  400507:	00 
  400508:	74 1e                	je     400528 <frame_dummy+0x28>
  40050a:	b8 00 00 00 00       	mov    $0x0,%eax
  40050f:	48 85 c0             	test   %rax,%rax
  400512:	74 14                	je     400528 <frame_dummy+0x28>
  400514:	55                   	push   %rbp
  400515:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  40051a:	48 89 e5             	mov    %rsp,%rbp
  40051d:	ff d0                	callq  *%rax
  40051f:	5d                   	pop    %rbp
  400520:	e9 7b ff ff ff       	jmpq   4004a0 <register_tm_clones>
  400525:	0f 1f 00             	nopl   (%rax)
  400528:	e9 73 ff ff ff       	jmpq   4004a0 <register_tm_clones>

000000000040052d <main>:
	struct DLL *next;
	struct DLL *prev;
	struct Child_DLL child;
};

int main(int argc, char **argv) {    
  40052d:	55                   	push   %rbp
  40052e:	48 89 e5             	mov    %rsp,%rbp
  400531:	53                   	push   %rbx
  400532:	48 83 ec 38          	sub    $0x38,%rsp
  400536:	89 7d cc             	mov    %edi,-0x34(%rbp)
  400539:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)

	struct DLL *head;
	struct DLL *iter;
	int i;

	head = malloc(sizeof(*head));
  40053d:	bf 28 00 00 00       	mov    $0x28,%edi
  400542:	e8 e9 fe ff ff       	callq  400430 <malloc@plt>
  400547:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	head->next = NULL;
  40054b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40054f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	head->prev = NULL;
  400556:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40055a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  400561:	00 

	iter = head;
  400562:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400566:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	for(i = 0; i<3; i++) {
  40056a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  400571:	eb 3d                	jmp    4005b0 <main+0x83>
		iter->next = malloc(sizeof(*iter));
  400573:	bf 28 00 00 00       	mov    $0x28,%edi
  400578:	e8 b3 fe ff ff       	callq  400430 <malloc@plt>
  40057d:	48 89 c2             	mov    %rax,%rdx
  400580:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400584:	48 89 10             	mov    %rdx,(%rax)
		iter->next->prev = iter;
  400587:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40058b:	48 8b 00             	mov    (%rax),%rax
  40058e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  400592:	48 89 50 08          	mov    %rdx,0x8(%rax)
		iter = iter->next;
  400596:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40059a:	48 8b 00             	mov    (%rax),%rax
  40059d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		iter->next = NULL;
  4005a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4005a5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	head = malloc(sizeof(*head));
	head->next = NULL;
	head->prev = NULL;

	iter = head;
	for(i = 0; i<3; i++) {
  4005ac:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  4005b0:	83 7d dc 02          	cmpl   $0x2,-0x24(%rbp)
  4005b4:	7e bd                	jle    400573 <main+0x46>
		iter->next->prev = iter;
		iter = iter->next;
		iter->next = NULL;
	}

	for(iter = head; iter->next != NULL; iter = iter->next) {
  4005b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4005ba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4005be:	eb 76                	jmp    400636 <main+0x109>
		iter->child.next = malloc(sizeof(iter->child));
  4005c0:	bf 18 00 00 00       	mov    $0x18,%edi
  4005c5:	e8 66 fe ff ff       	callq  400430 <malloc@plt>
  4005ca:	48 89 c2             	mov    %rax,%rdx
  4005cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4005d1:	48 89 50 18          	mov    %rdx,0x18(%rax)
		iter->child.next->prev = &iter->child;
  4005d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4005d9:	48 8b 40 18          	mov    0x18(%rax),%rax
  4005dd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4005e1:	48 83 c2 10          	add    $0x10,%rdx
  4005e5:	48 89 50 10          	mov    %rdx,0x10(%rax)
		iter->child.next->next = malloc(sizeof(iter->child));
  4005e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4005ed:	48 8b 58 18          	mov    0x18(%rax),%rbx
  4005f1:	bf 18 00 00 00       	mov    $0x18,%edi
  4005f6:	e8 35 fe ff ff       	callq  400430 <malloc@plt>
  4005fb:	48 89 43 08          	mov    %rax,0x8(%rbx)
		iter->child.next->next->prev = iter->child.next;
  4005ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400603:	48 8b 40 18          	mov    0x18(%rax),%rax
  400607:	48 8b 40 08          	mov    0x8(%rax),%rax
  40060b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40060f:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  400613:	48 89 50 10          	mov    %rdx,0x10(%rax)
		iter->child.next->next->next = NULL;
  400617:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40061b:	48 8b 40 18          	mov    0x18(%rax),%rax
  40061f:	48 8b 40 08          	mov    0x8(%rax),%rax
  400623:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40062a:	00 
		iter->next->prev = iter;
		iter = iter->next;
		iter->next = NULL;
	}

	for(iter = head; iter->next != NULL; iter = iter->next) {
  40062b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40062f:	48 8b 00             	mov    (%rax),%rax
  400632:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  400636:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40063a:	48 8b 00             	mov    (%rax),%rax
  40063d:	48 85 c0             	test   %rax,%rax
  400640:	0f 85 7a ff ff ff    	jne    4005c0 <main+0x93>
		iter->child.next->next = malloc(sizeof(iter->child));
		iter->child.next->next->prev = iter->child.next;
		iter->child.next->next->next = NULL;
		//iter = iter->next	
	}
}
  400646:	48 83 c4 38          	add    $0x38,%rsp
  40064a:	5b                   	pop    %rbx
  40064b:	5d                   	pop    %rbp
  40064c:	c3                   	retq   
  40064d:	0f 1f 00             	nopl   (%rax)

0000000000400650 <__libc_csu_init>:
  400650:	41 57                	push   %r15
  400652:	41 89 ff             	mov    %edi,%r15d
  400655:	41 56                	push   %r14
  400657:	49 89 f6             	mov    %rsi,%r14
  40065a:	41 55                	push   %r13
  40065c:	49 89 d5             	mov    %rdx,%r13
  40065f:	41 54                	push   %r12
  400661:	4c 8d 25 a8 07 20 00 	lea    0x2007a8(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  400668:	55                   	push   %rbp
  400669:	48 8d 2d a8 07 20 00 	lea    0x2007a8(%rip),%rbp        # 600e18 <__init_array_end>
  400670:	53                   	push   %rbx
  400671:	4c 29 e5             	sub    %r12,%rbp
  400674:	31 db                	xor    %ebx,%ebx
  400676:	48 c1 fd 03          	sar    $0x3,%rbp
  40067a:	48 83 ec 08          	sub    $0x8,%rsp
  40067e:	e8 5d fd ff ff       	callq  4003e0 <_init>
  400683:	48 85 ed             	test   %rbp,%rbp
  400686:	74 1e                	je     4006a6 <__libc_csu_init+0x56>
  400688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40068f:	00 
  400690:	4c 89 ea             	mov    %r13,%rdx
  400693:	4c 89 f6             	mov    %r14,%rsi
  400696:	44 89 ff             	mov    %r15d,%edi
  400699:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40069d:	48 83 c3 01          	add    $0x1,%rbx
  4006a1:	48 39 eb             	cmp    %rbp,%rbx
  4006a4:	75 ea                	jne    400690 <__libc_csu_init+0x40>
  4006a6:	48 83 c4 08          	add    $0x8,%rsp
  4006aa:	5b                   	pop    %rbx
  4006ab:	5d                   	pop    %rbp
  4006ac:	41 5c                	pop    %r12
  4006ae:	41 5d                	pop    %r13
  4006b0:	41 5e                	pop    %r14
  4006b2:	41 5f                	pop    %r15
  4006b4:	c3                   	retq   
  4006b5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  4006bc:	00 00 00 00 

00000000004006c0 <__libc_csu_fini>:
  4006c0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004006c4 <_fini>:
  4006c4:	48 83 ec 08          	sub    $0x8,%rsp
  4006c8:	48 83 c4 08          	add    $0x8,%rsp
  4006cc:	c3                   	retq   
