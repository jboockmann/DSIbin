
stackDLLTwoAllocSites/stackDLLTwoAllocSites:     file format elf64-x86-64


Disassembly of section .init:

0000000000400418 <_init>:
  400418:	48 83 ec 08          	sub    $0x8,%rsp
  40041c:	48 8b 05 d5 0b 20 00 	mov    0x200bd5(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  400423:	48 85 c0             	test   %rax,%rax
  400426:	74 05                	je     40042d <_init+0x15>
  400428:	e8 53 00 00 00       	callq  400480 <__gmon_start__@plt>
  40042d:	48 83 c4 08          	add    $0x8,%rsp
  400431:	c3                   	retq   

Disassembly of section .plt:

0000000000400440 <puts@plt-0x10>:
  400440:	ff 35 c2 0b 20 00    	pushq  0x200bc2(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400446:	ff 25 c4 0b 20 00    	jmpq   *0x200bc4(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40044c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400450 <puts@plt>:
  400450:	ff 25 c2 0b 20 00    	jmpq   *0x200bc2(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400456:	68 00 00 00 00       	pushq  $0x0
  40045b:	e9 e0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400460 <printf@plt>:
  400460:	ff 25 ba 0b 20 00    	jmpq   *0x200bba(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400466:	68 01 00 00 00       	pushq  $0x1
  40046b:	e9 d0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400470 <__libc_start_main@plt>:
  400470:	ff 25 b2 0b 20 00    	jmpq   *0x200bb2(%rip)        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400476:	68 02 00 00 00       	pushq  $0x2
  40047b:	e9 c0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400480 <__gmon_start__@plt>:
  400480:	ff 25 aa 0b 20 00    	jmpq   *0x200baa(%rip)        # 601030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400486:	68 03 00 00 00       	pushq  $0x3
  40048b:	e9 b0 ff ff ff       	jmpq   400440 <_init+0x28>

Disassembly of section .text:

0000000000400490 <_start>:
  400490:	31 ed                	xor    %ebp,%ebp
  400492:	49 89 d1             	mov    %rdx,%r9
  400495:	5e                   	pop    %rsi
  400496:	48 89 e2             	mov    %rsp,%rdx
  400499:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40049d:	50                   	push   %rax
  40049e:	54                   	push   %rsp
  40049f:	49 c7 c0 00 08 40 00 	mov    $0x400800,%r8
  4004a6:	48 c7 c1 90 07 40 00 	mov    $0x400790,%rcx
  4004ad:	48 c7 c7 6b 07 40 00 	mov    $0x40076b,%rdi
  4004b4:	e8 b7 ff ff ff       	callq  400470 <__libc_start_main@plt>
  4004b9:	f4                   	hlt    
  4004ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004004c0 <deregister_tm_clones>:
  4004c0:	b8 4f 10 60 00       	mov    $0x60104f,%eax
  4004c5:	55                   	push   %rbp
  4004c6:	48 2d 48 10 60 00    	sub    $0x601048,%rax
  4004cc:	48 83 f8 0e          	cmp    $0xe,%rax
  4004d0:	48 89 e5             	mov    %rsp,%rbp
  4004d3:	77 02                	ja     4004d7 <deregister_tm_clones+0x17>
  4004d5:	5d                   	pop    %rbp
  4004d6:	c3                   	retq   
  4004d7:	b8 00 00 00 00       	mov    $0x0,%eax
  4004dc:	48 85 c0             	test   %rax,%rax
  4004df:	74 f4                	je     4004d5 <deregister_tm_clones+0x15>
  4004e1:	5d                   	pop    %rbp
  4004e2:	bf 48 10 60 00       	mov    $0x601048,%edi
  4004e7:	ff e0                	jmpq   *%rax
  4004e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004004f0 <register_tm_clones>:
  4004f0:	b8 48 10 60 00       	mov    $0x601048,%eax
  4004f5:	55                   	push   %rbp
  4004f6:	48 2d 48 10 60 00    	sub    $0x601048,%rax
  4004fc:	48 c1 f8 03          	sar    $0x3,%rax
  400500:	48 89 e5             	mov    %rsp,%rbp
  400503:	48 89 c2             	mov    %rax,%rdx
  400506:	48 c1 ea 3f          	shr    $0x3f,%rdx
  40050a:	48 01 d0             	add    %rdx,%rax
  40050d:	48 d1 f8             	sar    %rax
  400510:	75 02                	jne    400514 <register_tm_clones+0x24>
  400512:	5d                   	pop    %rbp
  400513:	c3                   	retq   
  400514:	ba 00 00 00 00       	mov    $0x0,%edx
  400519:	48 85 d2             	test   %rdx,%rdx
  40051c:	74 f4                	je     400512 <register_tm_clones+0x22>
  40051e:	5d                   	pop    %rbp
  40051f:	48 89 c6             	mov    %rax,%rsi
  400522:	bf 48 10 60 00       	mov    $0x601048,%edi
  400527:	ff e2                	jmpq   *%rdx
  400529:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400530 <__do_global_dtors_aux>:
  400530:	80 3d 11 0b 20 00 00 	cmpb   $0x0,0x200b11(%rip)        # 601048 <__TMC_END__>
  400537:	75 11                	jne    40054a <__do_global_dtors_aux+0x1a>
  400539:	55                   	push   %rbp
  40053a:	48 89 e5             	mov    %rsp,%rbp
  40053d:	e8 7e ff ff ff       	callq  4004c0 <deregister_tm_clones>
  400542:	5d                   	pop    %rbp
  400543:	c6 05 fe 0a 20 00 01 	movb   $0x1,0x200afe(%rip)        # 601048 <__TMC_END__>
  40054a:	f3 c3                	repz retq 
  40054c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400550 <frame_dummy>:
  400550:	48 83 3d c8 08 20 00 	cmpq   $0x0,0x2008c8(%rip)        # 600e20 <__JCR_END__>
  400557:	00 
  400558:	74 1e                	je     400578 <frame_dummy+0x28>
  40055a:	b8 00 00 00 00       	mov    $0x0,%eax
  40055f:	48 85 c0             	test   %rax,%rax
  400562:	74 14                	je     400578 <frame_dummy+0x28>
  400564:	55                   	push   %rbp
  400565:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  40056a:	48 89 e5             	mov    %rsp,%rbp
  40056d:	ff d0                	callq  *%rax
  40056f:	5d                   	pop    %rbp
  400570:	e9 7b ff ff ff       	jmpq   4004f0 <register_tm_clones>
  400575:	0f 1f 00             	nopl   (%rax)
  400578:	e9 73 ff ff ff       	jmpq   4004f0 <register_tm_clones>

000000000040057d <addNodeToListA>:
void addNodeToListB(int id, struct node* prevNode);


// add a new stack node to the list if id != 0
// traverse the list in normal and reverse direction if id != 0
void addNodeToListA(int id, struct node* prevNode) {
  40057d:	55                   	push   %rbp
  40057e:	48 89 e5             	mov    %rsp,%rbp
  400581:	48 83 ec 30          	sub    $0x30,%rsp
  400585:	89 7d dc             	mov    %edi,-0x24(%rbp)
  400588:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	printf("addNodeToListA\n");
  40058c:	bf 14 08 40 00       	mov    $0x400814,%edi
  400591:	e8 ba fe ff ff       	callq  400450 <puts@plt>
	if(id == 0) {
  400596:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  40059a:	0f 85 95 00 00 00    	jne    400635 <addNodeToListA+0xb8>
		// stop adding new nodes. print the list and exit
		printf("Printing list in reverse: ");
  4005a0:	bf 23 08 40 00       	mov    $0x400823,%edi
  4005a5:	b8 00 00 00 00       	mov    $0x0,%eax
  4005aa:	e8 b1 fe ff ff       	callq  400460 <printf@plt>
		while(prevNode->prev != NULL){
  4005af:	eb 23                	jmp    4005d4 <addNodeToListA+0x57>
			printf("%d, ",prevNode->id);
  4005b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005b5:	8b 00                	mov    (%rax),%eax
  4005b7:	89 c6                	mov    %eax,%esi
  4005b9:	bf 3e 08 40 00       	mov    $0x40083e,%edi
  4005be:	b8 00 00 00 00       	mov    $0x0,%eax
  4005c3:	e8 98 fe ff ff       	callq  400460 <printf@plt>
			prevNode = prevNode->prev;
  4005c8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005cc:	48 8b 40 10          	mov    0x10(%rax),%rax
  4005d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
void addNodeToListA(int id, struct node* prevNode) {
	printf("addNodeToListA\n");
	if(id == 0) {
		// stop adding new nodes. print the list and exit
		printf("Printing list in reverse: ");
		while(prevNode->prev != NULL){
  4005d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005d8:	48 8b 40 10          	mov    0x10(%rax),%rax
  4005dc:	48 85 c0             	test   %rax,%rax
  4005df:	75 d0                	jne    4005b1 <addNodeToListA+0x34>
			printf("%d, ",prevNode->id);
			prevNode = prevNode->prev;
		}

		printf("\nFirst item in list: %d\n", prevNode->id);
  4005e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4005e5:	8b 00                	mov    (%rax),%eax
  4005e7:	89 c6                	mov    %eax,%esi
  4005e9:	bf 43 08 40 00       	mov    $0x400843,%edi
  4005ee:	b8 00 00 00 00       	mov    $0x0,%eax
  4005f3:	e8 68 fe ff ff       	callq  400460 <printf@plt>

		printf("Printing list in normal: ");
  4005f8:	bf 5c 08 40 00       	mov    $0x40085c,%edi
  4005fd:	b8 00 00 00 00       	mov    $0x0,%eax
  400602:	e8 59 fe ff ff       	callq  400460 <printf@plt>
		while(prevNode != NULL){
  400607:	eb 23                	jmp    40062c <addNodeToListA+0xaf>
			printf("%d, ",prevNode->id);
  400609:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40060d:	8b 00                	mov    (%rax),%eax
  40060f:	89 c6                	mov    %eax,%esi
  400611:	bf 3e 08 40 00       	mov    $0x40083e,%edi
  400616:	b8 00 00 00 00       	mov    $0x0,%eax
  40061b:	e8 40 fe ff ff       	callq  400460 <printf@plt>
			prevNode = prevNode->next;
  400620:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400624:	48 8b 40 08          	mov    0x8(%rax),%rax
  400628:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		}

		printf("\nFirst item in list: %d\n", prevNode->id);

		printf("Printing list in normal: ");
		while(prevNode != NULL){
  40062c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  400631:	75 d6                	jne    400609 <addNodeToListA+0x8c>
  400633:	eb 3d                	jmp    400672 <addNodeToListA+0xf5>
			prevNode = prevNode->next;
		}
	} else {
		// add a new node to the list
		struct node newNode;
		newNode.id = id;
  400635:	8b 45 dc             	mov    -0x24(%rbp),%eax
  400638:	89 45 e0             	mov    %eax,-0x20(%rbp)
		newNode.next = NULL;
  40063b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400642:	00 
		newNode.prev = prevNode;
  400643:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400647:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if(prevNode != NULL) {
  40064b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  400650:	74 0c                	je     40065e <addNodeToListA+0xe1>
			prevNode->next = &newNode;
  400652:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400656:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  40065a:	48 89 50 08          	mov    %rdx,0x8(%rax)
		}
		addNodeToListB(id-1, &newNode);
  40065e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  400661:	8d 50 ff             	lea    -0x1(%rax),%edx
  400664:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  400668:	48 89 c6             	mov    %rax,%rsi
  40066b:	89 d7                	mov    %edx,%edi
  40066d:	e8 02 00 00 00       	callq  400674 <addNodeToListB>
	}
}
  400672:	c9                   	leaveq 
  400673:	c3                   	retq   

0000000000400674 <addNodeToListB>:

// add a new stack node to the list if id != 0
// traverse the list in normal and reverse direction if id != 0
void addNodeToListB(int id, struct node* prevNode) {
  400674:	55                   	push   %rbp
  400675:	48 89 e5             	mov    %rsp,%rbp
  400678:	48 83 ec 30          	sub    $0x30,%rsp
  40067c:	89 7d dc             	mov    %edi,-0x24(%rbp)
  40067f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	printf("addNodeToListB\n");
  400683:	bf 76 08 40 00       	mov    $0x400876,%edi
  400688:	e8 c3 fd ff ff       	callq  400450 <puts@plt>
	if(id == 0) {
  40068d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  400691:	0f 85 95 00 00 00    	jne    40072c <addNodeToListB+0xb8>
		// stop adding new nodes. print the list and exit
		printf("Printing list in reverse: ");
  400697:	bf 23 08 40 00       	mov    $0x400823,%edi
  40069c:	b8 00 00 00 00       	mov    $0x0,%eax
  4006a1:	e8 ba fd ff ff       	callq  400460 <printf@plt>
		while(prevNode->prev != NULL){
  4006a6:	eb 23                	jmp    4006cb <addNodeToListB+0x57>
			printf("%d, ",prevNode->id);
  4006a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4006ac:	8b 00                	mov    (%rax),%eax
  4006ae:	89 c6                	mov    %eax,%esi
  4006b0:	bf 3e 08 40 00       	mov    $0x40083e,%edi
  4006b5:	b8 00 00 00 00       	mov    $0x0,%eax
  4006ba:	e8 a1 fd ff ff       	callq  400460 <printf@plt>
			prevNode = prevNode->prev;
  4006bf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4006c3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4006c7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
void addNodeToListB(int id, struct node* prevNode) {
	printf("addNodeToListB\n");
	if(id == 0) {
		// stop adding new nodes. print the list and exit
		printf("Printing list in reverse: ");
		while(prevNode->prev != NULL){
  4006cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4006cf:	48 8b 40 10          	mov    0x10(%rax),%rax
  4006d3:	48 85 c0             	test   %rax,%rax
  4006d6:	75 d0                	jne    4006a8 <addNodeToListB+0x34>
			printf("%d, ",prevNode->id);
			prevNode = prevNode->prev;
		}

		printf("\nFirst item in list: %d\n", prevNode->id);
  4006d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4006dc:	8b 00                	mov    (%rax),%eax
  4006de:	89 c6                	mov    %eax,%esi
  4006e0:	bf 43 08 40 00       	mov    $0x400843,%edi
  4006e5:	b8 00 00 00 00       	mov    $0x0,%eax
  4006ea:	e8 71 fd ff ff       	callq  400460 <printf@plt>

		printf("Printing list in normal: ");
  4006ef:	bf 5c 08 40 00       	mov    $0x40085c,%edi
  4006f4:	b8 00 00 00 00       	mov    $0x0,%eax
  4006f9:	e8 62 fd ff ff       	callq  400460 <printf@plt>
		while(prevNode != NULL){
  4006fe:	eb 23                	jmp    400723 <addNodeToListB+0xaf>
			printf("%d, ",prevNode->id);
  400700:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400704:	8b 00                	mov    (%rax),%eax
  400706:	89 c6                	mov    %eax,%esi
  400708:	bf 3e 08 40 00       	mov    $0x40083e,%edi
  40070d:	b8 00 00 00 00       	mov    $0x0,%eax
  400712:	e8 49 fd ff ff       	callq  400460 <printf@plt>
			prevNode = prevNode->next;
  400717:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40071b:	48 8b 40 08          	mov    0x8(%rax),%rax
  40071f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		}

		printf("\nFirst item in list: %d\n", prevNode->id);

		printf("Printing list in normal: ");
		while(prevNode != NULL){
  400723:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  400728:	75 d6                	jne    400700 <addNodeToListB+0x8c>
  40072a:	eb 3d                	jmp    400769 <addNodeToListB+0xf5>
			prevNode = prevNode->next;
		}
	} else {
		// add a new node to the list
		struct node newNode;
		newNode.id = id;
  40072c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40072f:	89 45 e0             	mov    %eax,-0x20(%rbp)
		newNode.next = NULL;
  400732:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  400739:	00 
		newNode.prev = prevNode;
  40073a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40073e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if(prevNode != NULL) {
  400742:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  400747:	74 0c                	je     400755 <addNodeToListB+0xe1>
			prevNode->next = &newNode;
  400749:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40074d:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  400751:	48 89 50 08          	mov    %rdx,0x8(%rax)
		}
		addNodeToListA(id-1, &newNode);
  400755:	8b 45 dc             	mov    -0x24(%rbp),%eax
  400758:	8d 50 ff             	lea    -0x1(%rax),%edx
  40075b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40075f:	48 89 c6             	mov    %rax,%rsi
  400762:	89 d7                	mov    %edx,%edi
  400764:	e8 14 fe ff ff       	callq  40057d <addNodeToListA>
	}
}
  400769:	c9                   	leaveq 
  40076a:	c3                   	retq   

000000000040076b <main>:


int main(void) {
  40076b:	55                   	push   %rbp
  40076c:	48 89 e5             	mov    %rsp,%rbp
	addNodeToListA(10, NULL);
  40076f:	be 00 00 00 00       	mov    $0x0,%esi
  400774:	bf 0a 00 00 00       	mov    $0xa,%edi
  400779:	e8 ff fd ff ff       	callq  40057d <addNodeToListA>
	return 0;
  40077e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400783:	5d                   	pop    %rbp
  400784:	c3                   	retq   
  400785:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40078c:	00 00 00 
  40078f:	90                   	nop

0000000000400790 <__libc_csu_init>:
  400790:	41 57                	push   %r15
  400792:	41 89 ff             	mov    %edi,%r15d
  400795:	41 56                	push   %r14
  400797:	49 89 f6             	mov    %rsi,%r14
  40079a:	41 55                	push   %r13
  40079c:	49 89 d5             	mov    %rdx,%r13
  40079f:	41 54                	push   %r12
  4007a1:	4c 8d 25 68 06 20 00 	lea    0x200668(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  4007a8:	55                   	push   %rbp
  4007a9:	48 8d 2d 68 06 20 00 	lea    0x200668(%rip),%rbp        # 600e18 <__init_array_end>
  4007b0:	53                   	push   %rbx
  4007b1:	4c 29 e5             	sub    %r12,%rbp
  4007b4:	31 db                	xor    %ebx,%ebx
  4007b6:	48 c1 fd 03          	sar    $0x3,%rbp
  4007ba:	48 83 ec 08          	sub    $0x8,%rsp
  4007be:	e8 55 fc ff ff       	callq  400418 <_init>
  4007c3:	48 85 ed             	test   %rbp,%rbp
  4007c6:	74 1e                	je     4007e6 <__libc_csu_init+0x56>
  4007c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4007cf:	00 
  4007d0:	4c 89 ea             	mov    %r13,%rdx
  4007d3:	4c 89 f6             	mov    %r14,%rsi
  4007d6:	44 89 ff             	mov    %r15d,%edi
  4007d9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  4007dd:	48 83 c3 01          	add    $0x1,%rbx
  4007e1:	48 39 eb             	cmp    %rbp,%rbx
  4007e4:	75 ea                	jne    4007d0 <__libc_csu_init+0x40>
  4007e6:	48 83 c4 08          	add    $0x8,%rsp
  4007ea:	5b                   	pop    %rbx
  4007eb:	5d                   	pop    %rbp
  4007ec:	41 5c                	pop    %r12
  4007ee:	41 5d                	pop    %r13
  4007f0:	41 5e                	pop    %r14
  4007f2:	41 5f                	pop    %r15
  4007f4:	c3                   	retq   
  4007f5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  4007fc:	00 00 00 00 

0000000000400800 <__libc_csu_fini>:
  400800:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000400804 <_fini>:
  400804:	48 83 ec 08          	sub    $0x8,%rsp
  400808:	48 83 c4 08          	add    $0x8,%rsp
  40080c:	c3                   	retq   
