
hide-nested-struct-extended/hide-nested-struct-extended:     file format elf64-x86-64


Disassembly of section .init:

0000000000400418 <_init>:
  400418:	48 83 ec 08          	sub    $0x8,%rsp
  40041c:	48 8b 05 d5 0b 20 00 	mov    0x200bd5(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  400423:	48 85 c0             	test   %rax,%rax
  400426:	74 05                	je     40042d <_init+0x15>
  400428:	e8 43 00 00 00       	callq  400470 <__gmon_start__@plt>
  40042d:	48 83 c4 08          	add    $0x8,%rsp
  400431:	c3                   	retq   

Disassembly of section .plt:

0000000000400440 <printf@plt-0x10>:
  400440:	ff 35 c2 0b 20 00    	pushq  0x200bc2(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400446:	ff 25 c4 0b 20 00    	jmpq   *0x200bc4(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40044c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400450 <printf@plt>:
  400450:	ff 25 c2 0b 20 00    	jmpq   *0x200bc2(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400456:	68 00 00 00 00       	pushq  $0x0
  40045b:	e9 e0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400460 <__libc_start_main@plt>:
  400460:	ff 25 ba 0b 20 00    	jmpq   *0x200bba(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400466:	68 01 00 00 00       	pushq  $0x1
  40046b:	e9 d0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400470 <__gmon_start__@plt>:
  400470:	ff 25 b2 0b 20 00    	jmpq   *0x200bb2(%rip)        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400476:	68 02 00 00 00       	pushq  $0x2
  40047b:	e9 c0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400480 <malloc@plt>:
  400480:	ff 25 aa 0b 20 00    	jmpq   *0x200baa(%rip)        # 601030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400486:	68 03 00 00 00       	pushq  $0x3
  40048b:	e9 b0 ff ff ff       	jmpq   400440 <_init+0x28>

Disassembly of section .text:

0000000000400490 <_start>:
  400490:	31 ed                	xor    %ebp,%ebp
  400492:	49 89 d1             	mov    %rdx,%r9
  400495:	5e                   	pop    %rsi
  400496:	48 89 e2             	mov    %rsp,%rdx
  400499:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40049d:	50                   	push   %rax
  40049e:	54                   	push   %rsp
  40049f:	49 c7 c0 e0 07 40 00 	mov    $0x4007e0,%r8
  4004a6:	48 c7 c1 70 07 40 00 	mov    $0x400770,%rcx
  4004ad:	48 c7 c7 fa 06 40 00 	mov    $0x4006fa,%rdi
  4004b4:	e8 a7 ff ff ff       	callq  400460 <__libc_start_main@plt>
  4004b9:	f4                   	hlt    
  4004ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004004c0 <deregister_tm_clones>:
  4004c0:	b8 4f 10 60 00       	mov    $0x60104f,%eax
  4004c5:	55                   	push   %rbp
  4004c6:	48 2d 48 10 60 00    	sub    $0x601048,%rax
  4004cc:	48 83 f8 0e          	cmp    $0xe,%rax
  4004d0:	48 89 e5             	mov    %rsp,%rbp
  4004d3:	77 02                	ja     4004d7 <deregister_tm_clones+0x17>
  4004d5:	5d                   	pop    %rbp
  4004d6:	c3                   	retq   
  4004d7:	b8 00 00 00 00       	mov    $0x0,%eax
  4004dc:	48 85 c0             	test   %rax,%rax
  4004df:	74 f4                	je     4004d5 <deregister_tm_clones+0x15>
  4004e1:	5d                   	pop    %rbp
  4004e2:	bf 48 10 60 00       	mov    $0x601048,%edi
  4004e7:	ff e0                	jmpq   *%rax
  4004e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004004f0 <register_tm_clones>:
  4004f0:	b8 48 10 60 00       	mov    $0x601048,%eax
  4004f5:	55                   	push   %rbp
  4004f6:	48 2d 48 10 60 00    	sub    $0x601048,%rax
  4004fc:	48 c1 f8 03          	sar    $0x3,%rax
  400500:	48 89 e5             	mov    %rsp,%rbp
  400503:	48 89 c2             	mov    %rax,%rdx
  400506:	48 c1 ea 3f          	shr    $0x3f,%rdx
  40050a:	48 01 d0             	add    %rdx,%rax
  40050d:	48 d1 f8             	sar    %rax
  400510:	75 02                	jne    400514 <register_tm_clones+0x24>
  400512:	5d                   	pop    %rbp
  400513:	c3                   	retq   
  400514:	ba 00 00 00 00       	mov    $0x0,%edx
  400519:	48 85 d2             	test   %rdx,%rdx
  40051c:	74 f4                	je     400512 <register_tm_clones+0x22>
  40051e:	5d                   	pop    %rbp
  40051f:	48 89 c6             	mov    %rax,%rsi
  400522:	bf 48 10 60 00       	mov    $0x601048,%edi
  400527:	ff e2                	jmpq   *%rdx
  400529:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400530 <__do_global_dtors_aux>:
  400530:	80 3d 11 0b 20 00 00 	cmpb   $0x0,0x200b11(%rip)        # 601048 <__TMC_END__>
  400537:	75 11                	jne    40054a <__do_global_dtors_aux+0x1a>
  400539:	55                   	push   %rbp
  40053a:	48 89 e5             	mov    %rsp,%rbp
  40053d:	e8 7e ff ff ff       	callq  4004c0 <deregister_tm_clones>
  400542:	5d                   	pop    %rbp
  400543:	c6 05 fe 0a 20 00 01 	movb   $0x1,0x200afe(%rip)        # 601048 <__TMC_END__>
  40054a:	f3 c3                	repz retq 
  40054c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400550 <frame_dummy>:
  400550:	48 83 3d c8 08 20 00 	cmpq   $0x0,0x2008c8(%rip)        # 600e20 <__JCR_END__>
  400557:	00 
  400558:	74 1e                	je     400578 <frame_dummy+0x28>
  40055a:	b8 00 00 00 00       	mov    $0x0,%eax
  40055f:	48 85 c0             	test   %rax,%rax
  400562:	74 14                	je     400578 <frame_dummy+0x28>
  400564:	55                   	push   %rbp
  400565:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  40056a:	48 89 e5             	mov    %rsp,%rbp
  40056d:	ff d0                	callq  *%rax
  40056f:	5d                   	pop    %rbp
  400570:	e9 7b ff ff ff       	jmpq   4004f0 <register_tm_clones>
  400575:	0f 1f 00             	nopl   (%rax)
  400578:	e9 73 ff ff ff       	jmpq   4004f0 <register_tm_clones>

000000000040057d <create_barrier_node>:
#define offsetof(st, m) ((size_t)&(((st *)0)->m))
#define container_of(ptr, type, member) ({ \
		const typeof( ((type *)0)->member ) *__mptr = (ptr); \
		(type *)( (char *)__mptr - offsetof(type,member) );})

void create_barrier_node(link_node *list_head, int barrier_type, int barrier_cnt) {
  40057d:	55                   	push   %rbp
  40057e:	48 89 e5             	mov    %rsp,%rbp
  400581:	48 83 ec 20          	sub    $0x20,%rsp
  400585:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400589:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  40058c:	89 55 e0             	mov    %edx,-0x20(%rbp)
	int i;

	if(barrier_type == 0) {
  40058f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  400593:	75 4f                	jne    4005e4 <create_barrier_node+0x67>
		barrier_node *node = malloc(sizeof(barrier_node));
  400595:	bf 20 00 00 00       	mov    $0x20,%edi
  40059a:	e8 e1 fe ff ff       	callq  400480 <malloc@plt>
  40059f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		// Access from head of created node
		node->payload_barrier = barrier_cnt;
  4005a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4005a7:	8b 55 e0             	mov    -0x20(%rbp),%edx
  4005aa:	89 10                	mov    %edx,(%rax)
		node->types.link.next = list_head->next;
  4005ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4005b0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4005b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4005b8:	48 89 50 10          	mov    %rdx,0x10(%rax)
		node->types.link.payload = 13;
  4005bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4005c0:	c7 40 08 0d 00 00 00 	movl   $0xd,0x8(%rax)
		node->types.type_id = 0;
  4005c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4005cb:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
		list_head->next = &node->types.link;
  4005d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4005d6:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4005da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4005de:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4005e2:	eb 57                	jmp    40063b <create_barrier_node+0xbe>
	} else {
		barrier_node2 *node = malloc(sizeof(barrier_node2));
  4005e4:	bf 20 00 00 00       	mov    $0x20,%edi
  4005e9:	e8 92 fe ff ff       	callq  400480 <malloc@plt>
  4005ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		// Access from head of created node
		node->payload_barrier = barrier_cnt;
  4005f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4005f6:	8b 55 e0             	mov    -0x20(%rbp),%edx
  4005f9:	89 10                	mov    %edx,(%rax)
		node->payload_barrier2 = barrier_cnt;
  4005fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4005ff:	8b 55 e0             	mov    -0x20(%rbp),%edx
  400602:	89 50 04             	mov    %edx,0x4(%rax)
		node->types.link.next = list_head->next;
  400605:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400609:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40060d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400611:	48 89 50 10          	mov    %rdx,0x10(%rax)
		node->types.link.payload = 37;
  400615:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400619:	c7 40 08 25 00 00 00 	movl   $0x25,0x8(%rax)
		node->types.type_id = 1;
  400620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400624:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%rax)
		list_head->next = &node->types.link;
  40062b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40062f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  400633:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400637:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}
	return;
  40063b:	90                   	nop
}
  40063c:	c9                   	leaveq 
  40063d:	c3                   	retq   

000000000040063e <iterate_list>:

void iterate_list(link_node *list_head) {
  40063e:	55                   	push   %rbp
  40063f:	48 89 e5             	mov    %rsp,%rbp
  400642:	48 83 ec 50          	sub    $0x50,%rsp
  400646:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	link_node *iter = list_head->next;
  40064a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40064e:	48 8b 40 08          	mov    0x8(%rax),%rax
  400652:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	while(iter){
  400656:	e9 92 00 00 00       	jmpq   4006ed <iterate_list+0xaf>
		int type_id;
		type_node *type_info = container_of(iter, type_node, link);	
  40065b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40065f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  400663:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400667:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if(type_info->type_id == 0){
  40066b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40066f:	8b 40 10             	mov    0x10(%rax),%eax
  400672:	85 c0                	test   %eax,%eax
  400674:	75 39                	jne    4006af <iterate_list+0x71>
			barrier_node *node = container_of(type_info, barrier_node, types);
  400676:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40067a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40067e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400682:	48 83 e8 08          	sub    $0x8,%rax
  400686:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			printf("Do something with barrier_node: %d\n", node->payload_barrier);
  40068a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40068e:	8b 00                	mov    (%rax),%eax
  400690:	89 c6                	mov    %eax,%esi
  400692:	bf f8 07 40 00       	mov    $0x4007f8,%edi
  400697:	b8 00 00 00 00       	mov    $0x0,%eax
  40069c:	e8 af fd ff ff       	callq  400450 <printf@plt>
			// Access from head of node -> should prevent nesting detection
			iter = node->types.link.next;
  4006a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4006a5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4006a9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4006ad:	eb 3e                	jmp    4006ed <iterate_list+0xaf>
			// Access from head of link node -> should reveal nesting
			//iter = iter->next;
		}
		else {
			barrier_node2 *node = container_of(type_info, barrier_node2, types);
  4006af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4006b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4006b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4006bb:	48 83 e8 08          	sub    $0x8,%rax
  4006bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			printf("Do something with barrier_node2: %d, %d\n", node->payload_barrier,
  4006c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4006c7:	8b 50 04             	mov    0x4(%rax),%edx
  4006ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4006ce:	8b 00                	mov    (%rax),%eax
  4006d0:	89 c6                	mov    %eax,%esi
  4006d2:	bf 20 08 40 00       	mov    $0x400820,%edi
  4006d7:	b8 00 00 00 00       	mov    $0x0,%eax
  4006dc:	e8 6f fd ff ff       	callq  400450 <printf@plt>
					node->payload_barrier2
			      );
			// Access from head of node -> should prevent nesting detection
			//iter = node->types.link.next;
			// Access from head of link node -> should reveal nesting
			iter = iter->next;
  4006e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4006e5:	48 8b 40 08          	mov    0x8(%rax),%rax
  4006e9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	return;
}

void iterate_list(link_node *list_head) {
	link_node *iter = list_head->next;
	while(iter){
  4006ed:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  4006f2:	0f 85 63 ff ff ff    	jne    40065b <iterate_list+0x1d>
			//iter = node->types.link.next;
			// Access from head of link node -> should reveal nesting
			iter = iter->next;
		}
	}
}
  4006f8:	c9                   	leaveq 
  4006f9:	c3                   	retq   

00000000004006fa <main>:


int main(int argc, char **argv) {    
  4006fa:	55                   	push   %rbp
  4006fb:	48 89 e5             	mov    %rsp,%rbp
  4006fe:	48 83 ec 20          	sub    $0x20,%rsp
  400702:	89 7d ec             	mov    %edi,-0x14(%rbp)
  400705:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)

	link_node *head = malloc(sizeof(link_node));
  400709:	bf 10 00 00 00       	mov    $0x10,%edi
  40070e:	e8 6d fd ff ff       	callq  400480 <malloc@plt>
  400713:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	int i;
	head->payload = 0;
  400717:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40071b:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	for(i = 0; i < 10; i++){
  400721:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  400728:	eb 25                	jmp    40074f <main+0x55>
		create_barrier_node(head, i % 2, i);
  40072a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40072d:	99                   	cltd   
  40072e:	c1 ea 1f             	shr    $0x1f,%edx
  400731:	01 d0                	add    %edx,%eax
  400733:	83 e0 01             	and    $0x1,%eax
  400736:	29 d0                	sub    %edx,%eax
  400738:	89 c1                	mov    %eax,%ecx
  40073a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40073d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400741:	89 ce                	mov    %ecx,%esi
  400743:	48 89 c7             	mov    %rax,%rdi
  400746:	e8 32 fe ff ff       	callq  40057d <create_barrier_node>
int main(int argc, char **argv) {    

	link_node *head = malloc(sizeof(link_node));
	int i;
	head->payload = 0;
	for(i = 0; i < 10; i++){
  40074b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  40074f:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  400753:	7e d5                	jle    40072a <main+0x30>
		create_barrier_node(head, i % 2, i);
	}
	iterate_list(head);
  400755:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400759:	48 89 c7             	mov    %rax,%rdi
  40075c:	e8 dd fe ff ff       	callq  40063e <iterate_list>
	return 0;
  400761:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400766:	c9                   	leaveq 
  400767:	c3                   	retq   
  400768:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40076f:	00 

0000000000400770 <__libc_csu_init>:
  400770:	41 57                	push   %r15
  400772:	41 89 ff             	mov    %edi,%r15d
  400775:	41 56                	push   %r14
  400777:	49 89 f6             	mov    %rsi,%r14
  40077a:	41 55                	push   %r13
  40077c:	49 89 d5             	mov    %rdx,%r13
  40077f:	41 54                	push   %r12
  400781:	4c 8d 25 88 06 20 00 	lea    0x200688(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  400788:	55                   	push   %rbp
  400789:	48 8d 2d 88 06 20 00 	lea    0x200688(%rip),%rbp        # 600e18 <__init_array_end>
  400790:	53                   	push   %rbx
  400791:	4c 29 e5             	sub    %r12,%rbp
  400794:	31 db                	xor    %ebx,%ebx
  400796:	48 c1 fd 03          	sar    $0x3,%rbp
  40079a:	48 83 ec 08          	sub    $0x8,%rsp
  40079e:	e8 75 fc ff ff       	callq  400418 <_init>
  4007a3:	48 85 ed             	test   %rbp,%rbp
  4007a6:	74 1e                	je     4007c6 <__libc_csu_init+0x56>
  4007a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4007af:	00 
  4007b0:	4c 89 ea             	mov    %r13,%rdx
  4007b3:	4c 89 f6             	mov    %r14,%rsi
  4007b6:	44 89 ff             	mov    %r15d,%edi
  4007b9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  4007bd:	48 83 c3 01          	add    $0x1,%rbx
  4007c1:	48 39 eb             	cmp    %rbp,%rbx
  4007c4:	75 ea                	jne    4007b0 <__libc_csu_init+0x40>
  4007c6:	48 83 c4 08          	add    $0x8,%rsp
  4007ca:	5b                   	pop    %rbx
  4007cb:	5d                   	pop    %rbp
  4007cc:	41 5c                	pop    %r12
  4007ce:	41 5d                	pop    %r13
  4007d0:	41 5e                	pop    %r14
  4007d2:	41 5f                	pop    %r15
  4007d4:	c3                   	retq   
  4007d5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  4007dc:	00 00 00 00 

00000000004007e0 <__libc_csu_fini>:
  4007e0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004007e4 <_fini>:
  4007e4:	48 83 ec 08          	sub    $0x8,%rsp
  4007e8:	48 83 c4 08          	add    $0x8,%rsp
  4007ec:	c3                   	retq   
