
skip-alloc-sites-artifical-pointers/skip-alloc-sites-artifical-pointers:     file format elf64-x86-64


Disassembly of section .init:

0000000000400450 <_init>:
  400450:	48 83 ec 08          	sub    $0x8,%rsp
  400454:	48 8b 05 9d 0b 20 00 	mov    0x200b9d(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  40045b:	48 85 c0             	test   %rax,%rax
  40045e:	74 05                	je     400465 <_init+0x15>
  400460:	e8 4b 00 00 00       	callq  4004b0 <__gmon_start__@plt>
  400465:	48 83 c4 08          	add    $0x8,%rsp
  400469:	c3                   	retq   

Disassembly of section .plt:

0000000000400470 <puts@plt-0x10>:
  400470:	ff 35 92 0b 20 00    	pushq  0x200b92(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400476:	ff 25 94 0b 20 00    	jmpq   *0x200b94(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40047c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400480 <puts@plt>:
  400480:	ff 25 92 0b 20 00    	jmpq   *0x200b92(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400486:	68 00 00 00 00       	pushq  $0x0
  40048b:	e9 e0 ff ff ff       	jmpq   400470 <_init+0x20>

0000000000400490 <printf@plt>:
  400490:	ff 25 8a 0b 20 00    	jmpq   *0x200b8a(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400496:	68 01 00 00 00       	pushq  $0x1
  40049b:	e9 d0 ff ff ff       	jmpq   400470 <_init+0x20>

00000000004004a0 <__libc_start_main@plt>:
  4004a0:	ff 25 82 0b 20 00    	jmpq   *0x200b82(%rip)        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  4004a6:	68 02 00 00 00       	pushq  $0x2
  4004ab:	e9 c0 ff ff ff       	jmpq   400470 <_init+0x20>

00000000004004b0 <__gmon_start__@plt>:
  4004b0:	ff 25 7a 0b 20 00    	jmpq   *0x200b7a(%rip)        # 601030 <_GLOBAL_OFFSET_TABLE_+0x30>
  4004b6:	68 03 00 00 00       	pushq  $0x3
  4004bb:	e9 b0 ff ff ff       	jmpq   400470 <_init+0x20>

00000000004004c0 <malloc@plt>:
  4004c0:	ff 25 72 0b 20 00    	jmpq   *0x200b72(%rip)        # 601038 <_GLOBAL_OFFSET_TABLE_+0x38>
  4004c6:	68 04 00 00 00       	pushq  $0x4
  4004cb:	e9 a0 ff ff ff       	jmpq   400470 <_init+0x20>

Disassembly of section .text:

00000000004004d0 <_start>:
  4004d0:	31 ed                	xor    %ebp,%ebp
  4004d2:	49 89 d1             	mov    %rdx,%r9
  4004d5:	5e                   	pop    %rsi
  4004d6:	48 89 e2             	mov    %rsp,%rdx
  4004d9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4004dd:	50                   	push   %rax
  4004de:	54                   	push   %rsp
  4004df:	49 c7 c0 f0 07 40 00 	mov    $0x4007f0,%r8
  4004e6:	48 c7 c1 80 07 40 00 	mov    $0x400780,%rcx
  4004ed:	48 c7 c7 df 06 40 00 	mov    $0x4006df,%rdi
  4004f4:	e8 a7 ff ff ff       	callq  4004a0 <__libc_start_main@plt>
  4004f9:	f4                   	hlt    
  4004fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400500 <deregister_tm_clones>:
  400500:	b8 57 10 60 00       	mov    $0x601057,%eax
  400505:	55                   	push   %rbp
  400506:	48 2d 50 10 60 00    	sub    $0x601050,%rax
  40050c:	48 83 f8 0e          	cmp    $0xe,%rax
  400510:	48 89 e5             	mov    %rsp,%rbp
  400513:	77 02                	ja     400517 <deregister_tm_clones+0x17>
  400515:	5d                   	pop    %rbp
  400516:	c3                   	retq   
  400517:	b8 00 00 00 00       	mov    $0x0,%eax
  40051c:	48 85 c0             	test   %rax,%rax
  40051f:	74 f4                	je     400515 <deregister_tm_clones+0x15>
  400521:	5d                   	pop    %rbp
  400522:	bf 50 10 60 00       	mov    $0x601050,%edi
  400527:	ff e0                	jmpq   *%rax
  400529:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400530 <register_tm_clones>:
  400530:	b8 50 10 60 00       	mov    $0x601050,%eax
  400535:	55                   	push   %rbp
  400536:	48 2d 50 10 60 00    	sub    $0x601050,%rax
  40053c:	48 c1 f8 03          	sar    $0x3,%rax
  400540:	48 89 e5             	mov    %rsp,%rbp
  400543:	48 89 c2             	mov    %rax,%rdx
  400546:	48 c1 ea 3f          	shr    $0x3f,%rdx
  40054a:	48 01 d0             	add    %rdx,%rax
  40054d:	48 d1 f8             	sar    %rax
  400550:	75 02                	jne    400554 <register_tm_clones+0x24>
  400552:	5d                   	pop    %rbp
  400553:	c3                   	retq   
  400554:	ba 00 00 00 00       	mov    $0x0,%edx
  400559:	48 85 d2             	test   %rdx,%rdx
  40055c:	74 f4                	je     400552 <register_tm_clones+0x22>
  40055e:	5d                   	pop    %rbp
  40055f:	48 89 c6             	mov    %rax,%rsi
  400562:	bf 50 10 60 00       	mov    $0x601050,%edi
  400567:	ff e2                	jmpq   *%rdx
  400569:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400570 <__do_global_dtors_aux>:
  400570:	80 3d d9 0a 20 00 00 	cmpb   $0x0,0x200ad9(%rip)        # 601050 <__TMC_END__>
  400577:	75 11                	jne    40058a <__do_global_dtors_aux+0x1a>
  400579:	55                   	push   %rbp
  40057a:	48 89 e5             	mov    %rsp,%rbp
  40057d:	e8 7e ff ff ff       	callq  400500 <deregister_tm_clones>
  400582:	5d                   	pop    %rbp
  400583:	c6 05 c6 0a 20 00 01 	movb   $0x1,0x200ac6(%rip)        # 601050 <__TMC_END__>
  40058a:	f3 c3                	repz retq 
  40058c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400590 <frame_dummy>:
  400590:	48 83 3d 88 08 20 00 	cmpq   $0x0,0x200888(%rip)        # 600e20 <__JCR_END__>
  400597:	00 
  400598:	74 1e                	je     4005b8 <frame_dummy+0x28>
  40059a:	b8 00 00 00 00       	mov    $0x0,%eax
  40059f:	48 85 c0             	test   %rax,%rax
  4005a2:	74 14                	je     4005b8 <frame_dummy+0x28>
  4005a4:	55                   	push   %rbp
  4005a5:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  4005aa:	48 89 e5             	mov    %rsp,%rbp
  4005ad:	ff d0                	callq  *%rax
  4005af:	5d                   	pop    %rbp
  4005b0:	e9 7b ff ff ff       	jmpq   400530 <register_tm_clones>
  4005b5:	0f 1f 00             	nopl   (%rax)
  4005b8:	e9 73 ff ff ff       	jmpq   400530 <register_tm_clones>

00000000004005bd <create_list>:
	struct _link_node *next;
	struct _link_node *down;
	int payload;
} link_node;	

link_node * create_list(link_node **head) {
  4005bd:	55                   	push   %rbp
  4005be:	48 89 e5             	mov    %rsp,%rbp
  4005c1:	48 83 ec 20          	sub    $0x20,%rsp
  4005c5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	printf("create_list: entered\n");
  4005c9:	bf 04 08 40 00       	mov    $0x400804,%edi
  4005ce:	e8 ad fe ff ff       	callq  400480 <puts@plt>
	int i,no_elems = 4;
  4005d3:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)
	link_node *tail;
	tail = malloc(sizeof(*tail));
  4005da:	bf 18 00 00 00       	mov    $0x18,%edi
  4005df:	e8 dc fe ff ff       	callq  4004c0 <malloc@plt>
  4005e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*head = tail;
  4005e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4005ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4005f0:	48 89 10             	mov    %rdx,(%rax)
	for(i = 0; i < no_elems; i++) {
  4005f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  4005fa:	eb 23                	jmp    40061f <create_list+0x62>
		tail->next = malloc(sizeof(*tail));
  4005fc:	bf 18 00 00 00       	mov    $0x18,%edi
  400601:	e8 ba fe ff ff       	callq  4004c0 <malloc@plt>
  400606:	48 89 c2             	mov    %rax,%rdx
  400609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40060d:	48 89 10             	mov    %rdx,(%rax)
		tail = tail->next;
  400610:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400614:	48 8b 00             	mov    (%rax),%rax
  400617:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	printf("create_list: entered\n");
	int i,no_elems = 4;
	link_node *tail;
	tail = malloc(sizeof(*tail));
	*head = tail;
	for(i = 0; i < no_elems; i++) {
  40061b:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  40061f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  400622:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  400625:	7c d5                	jl     4005fc <create_list+0x3f>
		tail->next = malloc(sizeof(*tail));
		tail = tail->next;
	}
	return tail;
  400627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40062b:	c9                   	leaveq 
  40062c:	c3                   	retq   

000000000040062d <create_list2>:

link_node * create_list2(link_node **head) {
  40062d:	55                   	push   %rbp
  40062e:	48 89 e5             	mov    %rsp,%rbp
  400631:	48 83 ec 20          	sub    $0x20,%rsp
  400635:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	printf("create_list2: entered\n");
  400639:	bf 19 08 40 00       	mov    $0x400819,%edi
  40063e:	e8 3d fe ff ff       	callq  400480 <puts@plt>
	int i,no_elems = 10;
  400643:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%rbp)
	link_node *noise, *noise2, *noise3, *tail;
	tail = malloc(sizeof(*tail));
  40064a:	bf 18 00 00 00       	mov    $0x18,%edi
  40064f:	e8 6c fe ff ff       	callq  4004c0 <malloc@plt>
  400654:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*head = tail;
  400658:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40065c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400660:	48 89 10             	mov    %rdx,(%rax)
	for(i = 0; i < no_elems; i++) {
  400663:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40066a:	eb 2d                	jmp    400699 <create_list2+0x6c>
		tail->next = malloc(sizeof(*tail));
  40066c:	bf 18 00 00 00       	mov    $0x18,%edi
  400671:	e8 4a fe ff ff       	callq  4004c0 <malloc@plt>
  400676:	48 89 c2             	mov    %rax,%rdx
  400679:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40067d:	48 89 10             	mov    %rdx,(%rax)
		tail->payload = i;
  400680:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400684:	8b 55 f0             	mov    -0x10(%rbp),%edx
  400687:	89 50 10             	mov    %edx,0x10(%rax)
		tail = tail->next;
  40068a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40068e:	48 8b 00             	mov    (%rax),%rax
  400691:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	printf("create_list2: entered\n");
	int i,no_elems = 10;
	link_node *noise, *noise2, *noise3, *tail;
	tail = malloc(sizeof(*tail));
	*head = tail;
	for(i = 0; i < no_elems; i++) {
  400695:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  400699:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40069c:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  40069f:	7c cb                	jl     40066c <create_list2+0x3f>
		tail->next = malloc(sizeof(*tail));
		tail->payload = i;
		tail = tail->next;
	}
	return tail;
  4006a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4006a5:	c9                   	leaveq 
  4006a6:	c3                   	retq   

00000000004006a7 <print_list>:

void print_list(link_node *head){
  4006a7:	55                   	push   %rbp
  4006a8:	48 89 e5             	mov    %rsp,%rbp
  4006ab:	48 83 ec 10          	sub    $0x10,%rsp
  4006af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	while(head != NULL){
  4006b3:	eb 21                	jmp    4006d6 <print_list+0x2f>
		printf("print_list: element %p\n", head);
  4006b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4006b9:	48 89 c6             	mov    %rax,%rsi
  4006bc:	bf 2f 08 40 00       	mov    $0x40082f,%edi
  4006c1:	b8 00 00 00 00       	mov    $0x0,%eax
  4006c6:	e8 c5 fd ff ff       	callq  400490 <printf@plt>
		head = head->next;
  4006cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4006cf:	48 8b 00             	mov    (%rax),%rax
  4006d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	}
	return tail;
}

void print_list(link_node *head){
	while(head != NULL){
  4006d6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4006db:	75 d8                	jne    4006b5 <print_list+0xe>
		printf("print_list: element %p\n", head);
		head = head->next;
	}
}
  4006dd:	c9                   	leaveq 
  4006de:	c3                   	retq   

00000000004006df <main>:

#define put_link_node(prev, cur) \
	link_node * cur = malloc(sizeof(link_node)); \
	prev->next = cur;

int main(int argc, char **argv) {    
  4006df:	55                   	push   %rbp
  4006e0:	48 89 e5             	mov    %rsp,%rbp
  4006e3:	48 83 ec 70          	sub    $0x70,%rsp
  4006e7:	89 7d 9c             	mov    %edi,-0x64(%rbp)
  4006ea:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
	list1_head->next->next = malloc(sizeof(link_node));
	list1_head->next->next->next = malloc(sizeof(link_node));
	list1_head->next->next->next->next = malloc(sizeof(link_node));
*/
	//list1_head = malloc(sizeof(link_node));
	link_node * n1 = malloc(sizeof(link_node));
  4006ee:	bf 18 00 00 00       	mov    $0x18,%edi
  4006f3:	e8 c8 fd ff ff       	callq  4004c0 <malloc@plt>
  4006f8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	put_link_node(n1,n2);
  4006fc:	bf 18 00 00 00       	mov    $0x18,%edi
  400701:	e8 ba fd ff ff       	callq  4004c0 <malloc@plt>
  400706:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40070a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40070e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  400712:	48 89 10             	mov    %rdx,(%rax)
	put_link_node(n2,n3);
  400715:	bf 18 00 00 00       	mov    $0x18,%edi
  40071a:	e8 a1 fd ff ff       	callq  4004c0 <malloc@plt>
  40071f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400723:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400727:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40072b:	48 89 10             	mov    %rdx,(%rax)
	put_link_node(n3,n4);
  40072e:	bf 18 00 00 00       	mov    $0x18,%edi
  400733:	e8 88 fd ff ff       	callq  4004c0 <malloc@plt>
  400738:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40073c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400740:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  400744:	48 89 10             	mov    %rdx,(%rax)
	put_link_node(n4,n5);
  400747:	bf 18 00 00 00       	mov    $0x18,%edi
  40074c:	e8 6f fd ff ff       	callq  4004c0 <malloc@plt>
  400751:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  400755:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  400759:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40075d:	48 89 10             	mov    %rdx,(%rax)
	put_link_node(n5,n6);
  400760:	bf 18 00 00 00       	mov    $0x18,%edi
  400765:	e8 56 fd ff ff       	callq  4004c0 <malloc@plt>
  40076a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40076e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  400772:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  400776:	48 89 10             	mov    %rdx,(%rax)
	*/

	//link_node *tmp = list2_head;
	//list1_head->prev = tmp;

	return 0;
  400779:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40077e:	c9                   	leaveq 
  40077f:	c3                   	retq   

0000000000400780 <__libc_csu_init>:
  400780:	41 57                	push   %r15
  400782:	41 89 ff             	mov    %edi,%r15d
  400785:	41 56                	push   %r14
  400787:	49 89 f6             	mov    %rsi,%r14
  40078a:	41 55                	push   %r13
  40078c:	49 89 d5             	mov    %rdx,%r13
  40078f:	41 54                	push   %r12
  400791:	4c 8d 25 78 06 20 00 	lea    0x200678(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  400798:	55                   	push   %rbp
  400799:	48 8d 2d 78 06 20 00 	lea    0x200678(%rip),%rbp        # 600e18 <__init_array_end>
  4007a0:	53                   	push   %rbx
  4007a1:	4c 29 e5             	sub    %r12,%rbp
  4007a4:	31 db                	xor    %ebx,%ebx
  4007a6:	48 c1 fd 03          	sar    $0x3,%rbp
  4007aa:	48 83 ec 08          	sub    $0x8,%rsp
  4007ae:	e8 9d fc ff ff       	callq  400450 <_init>
  4007b3:	48 85 ed             	test   %rbp,%rbp
  4007b6:	74 1e                	je     4007d6 <__libc_csu_init+0x56>
  4007b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4007bf:	00 
  4007c0:	4c 89 ea             	mov    %r13,%rdx
  4007c3:	4c 89 f6             	mov    %r14,%rsi
  4007c6:	44 89 ff             	mov    %r15d,%edi
  4007c9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  4007cd:	48 83 c3 01          	add    $0x1,%rbx
  4007d1:	48 39 eb             	cmp    %rbp,%rbx
  4007d4:	75 ea                	jne    4007c0 <__libc_csu_init+0x40>
  4007d6:	48 83 c4 08          	add    $0x8,%rsp
  4007da:	5b                   	pop    %rbx
  4007db:	5d                   	pop    %rbp
  4007dc:	41 5c                	pop    %r12
  4007de:	41 5d                	pop    %r13
  4007e0:	41 5e                	pop    %r14
  4007e2:	41 5f                	pop    %r15
  4007e4:	c3                   	retq   
  4007e5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  4007ec:	00 00 00 00 

00000000004007f0 <__libc_csu_fini>:
  4007f0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004007f4 <_fini>:
  4007f4:	48 83 ec 08          	sub    $0x8,%rsp
  4007f8:	48 83 c4 08          	add    $0x8,%rsp
  4007fc:	c3                   	retq   
